#!/bin/bash

# MIT License
# 
# Copyright (c) 2020-2021 jtyers, ayekat (https://github.com/jtyers/qutebrowser-profile, https://github.com/ayekat/dotfiles/blob/master/bin/qutebrowser)
# Copyright (c) 2022 chaorace (https://github.com/chaorace/qutebrowser-profile)
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

QP_NAME="qutebrowser-profile"
QP_VERSION="1.1.0"

# Wrapper for qutebrowser that allows the user to maintain different profiles for qutebrowser
#
usage="$QP_NAME [--list | --load <name> | --new <name> | --choose] [additional args] [qutebrowser args]"
read -r -d '' help <<EOF
  $QP_NAME - use qutebrowser with per-profile cache, session history, etc

SYNTAX
  $usage

MAIN ARGUMENTS
  --list
    Prints profiles to output. May be combined with another main argument.

    Only non-hidden profiles will be shown.
    See --show-hidden for lifting this restriction.

  --load <name>, -l <name>
    Directly load profile called <name>.

  --new <name>, -n <name>
    Directly create and load profile called <name>.

  --choose, -c
    Prompt the user to select a profile via dmenu/Rofi.
    Arbitrary name inputs are also accepted, which will either create a new
    profile with the given name or launch a matching hidden profile.

    Only non-hidden profiles will be shown.
    See --show-hidden for lifting this restriction.

ADDITIONAL ARGUMENTS
  --allow-no-profile <slotname>, -np <slotname>
    Applies to: --choose, --load

    If specified, a special choice option called <slotname> will be provided
    which launches qutebrowser without applying any profiles.

  --dmenu <path>
    Override location of dmenu executable.

    Rofi is autodetected without needing to set this.

  --only-existing, -e
    Applies to: --choose

    Prevents creating new profiles by manually entering a name into the prompt.

  --qutebrowser <path>
    Override location of qutebrowser executable.

  --set OPTION VALUE
    Sets qutebrowser configuration settings for the session.
    May be specified multiple times.

    No effect if a qutebrowser session is already running for selected profile.

  --show-hidden, -a
    If specified, normally hidden profiles (i.e.: has a name starting in ".")
    will be included in the resulting list/prompt.

  --suppress-info
    If specified, prevents info messages from printing to output.

    This is useful when using the program a protocol handler if certain
    applications (e.g.: Slack) treat log output as a launch failure.

Version $QP_VERSION
This fork is maintained by Christopher Crockett (https://github.com/chaorace/qutebrowser-profile)
Base package written by Jonny Tyers (https://github.com/jtyers/qutebrowser-profile)
Original concept by ayekat (https://github.com/ayekat/dotfiles/blob/master/bin/qutebrowser)
Released under the MIT Licence. See LICENCE file for full licence terms.

EOF

set -eu

# Set default values as defined in XDG base directory spec
# https://specifications.freedesktop.org/basedir-spec/latest/
XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

die() {
  echo -e "$@" >&2
  exit 1
}

listProfiles() {
  # our profilesRoot may contain dirs that are not qutebrowser profiles, so we look for
  # the 'state' file to determine whether something is a profile, and then pipe thru dirname
  if [ $allowNoProfile -eq 1 ]; then
    echo "$noProfileName"
  fi

  profiles=$(find "$profilesRoot" -mindepth 2 -maxdepth 2 -name state -type f -printf "%P\n")

  if [ $showHidden -eq 1 ]; then
    echo "$profiles" | xargs dirname
  else
    echo "$profiles" | grep -v '^\.' | xargs dirname
  fi
}

# usage: checkProfileExists <profile>
checkProfileExists() {
  profile="$1"
  [ -d "$profilesRoot/$profile" ] || die "profile $profile does not exist"
}

# usage: runQbWithProfile <profile>
runQbWithProfile() {
  profile="$1"
  qbArgs+=("-r" "$profile")

  runQb ${qbArgs[@]}
}

# Copy the canonical Qutebrowser .desktop file and customize it.
createDesktopFile() {
  profile="$1"
  desktopFile="$XDG_DATA_HOME/applications/${QP_NAME}-${profile}.desktop"
  # XXX Check if this file exists and/or support other locations.
  cp /usr/share/applications/org.qutebrowser.qutebrowser.desktop $desktopFile
  appId="${QP_NAME}-${profile}"
  newExec="Exec=$QP_NAME "
  newExec+="--load '$profile' "
  newExec+=$setFlags

  # Escape for sed
  newExecEscaped=$(sed 's/[&/\]/\\&/g' <<<"$newExec")
  profileEscaped=$(sed 's/[&/\]/\\&/g' <<<"$profile")
  appIdEscaped=$(sed 's/[&/\]/\\&/g' <<<"$appId")


  sed -i "s/Exec=qutebrowser/$newExecEscaped/g;
          s/Name=qutebrowser/Name=$QP_NAME [$profileEscaped]/;
          s/StartupWMClass=qutebrowser/StartupWMClass=$appIdEscaped/" $desktopFile
}

# Create a symlink from <srcdir> to <dstdir>. If dstdir exists, remove it if empty.
# usage: linkDirIntelligently <srcdir> <dstdir>
linkDirIntelligently() {
  srcdir="$1"
  dstdir="$2"

  if [ ! -L "$dstdir" ] && [ -d "$dstdir" ] && [ -n "$(ls -a $dstdir)" ]; then
    rmdir $dstdir
  fi

  ln -fsT "$srcdir" "$dstdir"
}

# usage: runQb <args>
runQb() {
  # https://github.com/ayekat/dotfiles/blob/master/bin/qutebrowser
  # https://wiki.archlinux.org/index.php/Qutebrowser#dwb-like_session_handling
  
  # $XDG_RUNTIME_DIR/qutebrowser/$session/cache → $XDG_CACHE_HOME/qutebrowser/$session
  # $XDG_RUNTIME_DIR/qutebrowser/$session/data → $XDG_DATA_HOME/qutebrowser/$session
  # $XDG_RUNTIME_DIR/qutebrowser/$session/data/userscripts → $XDG_DATA_HOME/qutebrowser/userscripts
  # $XDG_RUNTIME_DIR/qutebrowser/$session/data/greasemonkey → $XDG_DATA_HOME/qutebrowser/greasemonkey
  # $XDG_RUNTIME_DIR/qutebrowser/$session/data/qtwebengine_dictionaries → $XDG_DATA_HOME/qutebrowser/qtwebengine_dictionaries
  # $XDG_RUNTIME_DIR/qutebrowser/$session/config → $XDG_CONFIG_HOME/qutebrowser
  # $XDG_RUNTIME_DIR/qutebrowser/$session/runtime (no symlink, regular directory)
  #
  # We then specify $XDG_RUNTIME_DIR/qutebrowser/$session as a --basedir, and the
  # files will end up in their intended locations (notice how the config directory
  # is the same for all sessions, as there is no point in keeping it separate).
  #
  # YOU HAVE BEEN WARNED.
  #
  # Written by ayekat in an burst of nostalgy, on a mildly cold wednesday night in
  # February 2017.
  #
  # Enhanced a little by jonny on a dreary cold Friday morning in December 2018.

  # Translate options: remove occurrences of -r/--restore from the list of
  # command line arguments and save the session name for later; ignore -R (TODO):
  session='default'
  basedir_specified=0
  opts_read=0
  while [ $opts_read -lt $# ]; do
    opt="$1" && shift
    case "$opt" in
      (--basedir) basedir_specified=1 ;;
      (-r|-[!-]*r|--restore) test $# -gt 0 && session="$1" && shift && continue ;;
      (-R) continue ;; # TODO
    esac
    set -- "$@" "$opt"
    opts_read=$((opts_read + 1))
  done

  # Set up session base directory, unless --basedir has been specified by the
  # user:
  if [ $basedir_specified -eq 0 ]; then
    basedir="$XDG_RUNTIME_DIR/qutebrowser/$session"
    set -- --basedir "$basedir" "$@"
    mkdir -p \
      "$basedir" \
      "$XDG_CONFIG_HOME/qutebrowser" \
      "$XDG_CACHE_HOME/qutebrowser/$session" \
      "$XDG_DATA_HOME/qutebrowser/$session" \
      "$basedir/runtime"

    linkDirIntelligently "$XDG_CONFIG_HOME/qutebrowser" "$basedir/config"
    linkDirIntelligently "$XDG_CACHE_HOME/qutebrowser/$session" "$basedir/cache"
    linkDirIntelligently "$XDG_DATA_HOME/qutebrowser/$session" "$basedir/data"

    errorMsg="Profile %s already has its own %s directory. You will need to merge this manually into $HOME/.local/share/qutebrowser/"

    linkDirIntelligently "$XDG_DATA_HOME/qutebrowser/userscripts" "$basedir/data/userscripts" \
      || warningMessage $(printf "$errorMsg" $session userscripts)
    linkDirIntelligently "$XDG_DATA_HOME/qutebrowser/greasemonkey" "$basedir/data/greasemonkey" \
      || warningMessage $(printf "$errorMsg" $session greasemonkey)
    linkDirIntelligently "$XDG_DATA_HOME/qutebrowser/qtwebengine_dictionaries" "$basedir/data/qtwebengine_dictionaries" \
      || warningMessage $(printf "$errorMsg" $session qtwebengine_dictionaries)
  fi

  infoMessage "using basedir $basedir"

  # Launch qutebrowser with a unique app ID for each profile.
  # X11 uses the  --qt-arg name to set WM_CLASS
  # Wayland uses --desktop-file-name to set app_id
  # Requires Qutebrowser > 1.14.1 and Bash 4.4
  $qutebrowser --set window.title_format "{perc}$QP_NAME [${session}]{title_sep}{current_title}" \
     --desktop-file-name "${QP_NAME}-$session" \
     --qt-arg       name "${QP_NAME}-$session" \
     $setFlags \
    "$@" &>/dev/null &
}

runQbNoProfile() {
  infoMessage "launching without any profile"
  $qutebrowser $setFlags ${qbArgs[@]} &>/dev/null &
}

infoMessage() {
  msg="$@"
  if [ $echoInfo -eq 1 ]; then
    echo "$msg"
  fi
}

# show a warning message, without exiting
warningMessage() {
  msg="$@"
  if $(which zenity &>/dev/null); then
    zenity --warning --title "$QP_NAME" --text "$msg"

  elif $(which notify-send &>/dev/null); then
    notify-send -a "$QP_NAME" -i dialog-warning "$QP_NAME: error" "$msg"

  fi
  
  # always echo to stderr, in case GUI dialogs don't work/aren't noticed
  echo "$msg" >&2 
}

#uid=$(id -u)
profilesRoot="$XDG_DATA_HOME/qutebrowser" #"/run/user/$uid/qutebrowser"
echoInfo=1
choose=0
allowNoProfile=0
noProfileName="default"
showHidden=0
onlyExisting=0
list=0
dmenu=""
qutebrowser="qutebrowser"
load=""
new=""
rofi=0
declare -a qbArgs
setFlags=''

if [ $# -eq 0 ]; then
  # if no args specified, assume --choose
  choose=1

else
  while true; do
    [ $# -eq 0 ] && break

    case $1 in
      --help|-h) echo "$help"; exit 0 ;;
      --qutebrowser) qutebrowser="$2"; shift; shift ;;
      --dmenu) dmenu="$2"; shift; shift ;;
      --suppress-info) echoInfo=0; shift ;;
      
      --list|-l) list=1; shift ;;
      --choose|-c) choose=1; shift ;;
      --allow-no-profile|-np)
        allowNoProfile=1
        if [ $# -ge 2 ] && [ "$2" = "${2#--}" ]; then
          noProfileName="$2"
          shift;
        fi
        shift;
        ;;
      --show-hidden|-a) showHidden=1; shift ;;
      --only-existing|-e) onlyExisting=1; shift ;;
      --load|-p)
        [ $# -ge 2 ] || die "you must specify a profile to load\n\n$usage"
        load="$2"
        shift; shift;
        ;;
      --new|-n)
        [ $# -ge 2 ] || die "you must specify a profile to create\n\n$usage"
        new="$2";shift; shift
        ;;
     
      # For use with --new, pass --set OPTION VALUE to qutebrowser
      # May be provided multiple times.
      --set)
       # TODO: Fix the quoting here
        #setFlags+=$(printf "%q %q '%q'\n" "$1" "$2" "$3")
        setFlags+=$(printf '%s %s "%s" ' "$1" "$2" "$3")
        shift; shift; shift;
        ;;

      --restore|-r)
        # these are qutebrowser args that interfere with our profile management, so we filter them out
        echo "warning: ignoring $1" >&2
        shift; shift; # -r has a <session> arg, so skip that too
        ;;

      --override-restore|-R)
        # these are qutebrowser args that interfere with our profile management, so we filter them out
        echo "warning: ignoring $1" >&2
        shift;
        ;;

      *) qbArgs+=("$1"); shift; ;;
    esac
  done
fi

if [ -z "$dmenu" ]; then
  if which rofi >/dev/null; then
    dmenu="rofi -dmenu"
    rofi=1

  elif which dmenu >/dev/null; then
    dmenu="dmenu"

  else
    die "neither dmenu or rofi are available on \$PATH; either install them or use --dmenu to specify manually"
  fi
fi

if [ -z "$new" ] && [ -z "$load" ] && [ $choose -eq 0 ] && [ $list -eq 0 ]; then
  # if user chose neither --choose or --list, assume --choose
  choose=1
fi

if [ $list -eq 1 ]; then
  listProfiles

elif [ $choose -eq 1 ]; then
  [ -n "$new" ] && die "cannot use --choose with --new"
  [ -n "$load" ] && die "cannot use --choose with --load"

  dmenuArgs="-p qutebrowser"

  [ $rofi -eq 1 ] && dmenuArgs="$dmenuArgs -mesg $(echo "${qbArgs:-}" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g')"

  [ $onlyExisting -eq 1 ] && dmenuArgs="$dmenuArgs -no-custom"

  set +e
  chosenProfile=$(
    listProfiles | $dmenu $dmenuArgs
  )
  set -e

  if [ -z "$chosenProfile" ]; then
    # if user chooses no profile, treat this as an intended cancellation and exit
    # with success (zero), so xdg-open does not try other browsers thinking we failed
    echo "no profile chosen" >&2
    exit 0
  fi

  if [ $allowNoProfile -eq 1 ] && [ "$chosenProfile" = "$noProfileName" ] ; then
    runQbNoProfile
  else
    [ $onlyExisting -eq 1 ] && checkProfileExists "$chosenProfile" # double-check
    runQbWithProfile "$chosenProfile"
  fi

elif [ -n "$load" ]; then
  if [ $allowNoProfile -eq 1 ] && [ "$load" = "$noProfileName" ] ; then
    runQbNoProfile
  else
    [ -n "$new" ] && die "cannot use --load with --new"
    checkProfileExists "$load"
    runQbWithProfile "$load"
  fi

elif [ -n "$new" ]; then
  [ -n "$load" ] && die "cannot use --load with --new"

  createDesktopFile "$new"
  infoMessage "qutebrowser profile '$new' created."

  runQbWithProfile "$new"
fi
